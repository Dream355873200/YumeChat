// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Message.proto
// Protobuf C++ Version: 5.29.3

#ifndef Message_2eproto_2epb_2eh
#define Message_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Message_2eproto;
namespace message {
class MessageMeta;
struct MessageMetaDefaultTypeInternal;
extern MessageMetaDefaultTypeInternal _MessageMeta_default_instance_;
class MsgNode;
struct MsgNodeDefaultTypeInternal;
extern MsgNodeDefaultTypeInternal _MsgNode_default_instance_;
}  // namespace message
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace message {
enum MessageType : int {
  UNKNOWN = 0,
  TEXT = 1,
  IMAGE = 2,
  AUDIO = 3,
  VIDEO = 4,
  FILE = 5,
  RICH = 6,
  COMMAND = 7,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MessageType_IsValid(int value);
extern const uint32_t MessageType_internal_data_[];
constexpr MessageType MessageType_MIN = static_cast<MessageType>(0);
constexpr MessageType MessageType_MAX = static_cast<MessageType>(7);
constexpr int MessageType_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
MessageType_descriptor();
template <typename T>
const std::string& MessageType_Name(T value) {
  static_assert(std::is_same<T, MessageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageType_Name().");
  return MessageType_Name(static_cast<MessageType>(value));
}
template <>
inline const std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MessageType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool MessageType_Parse(absl::string_view name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
      MessageType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MessageMeta final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:message.MessageMeta) */ {
 public:
  inline MessageMeta() : MessageMeta(nullptr) {}
  ~MessageMeta() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MessageMeta* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MessageMeta));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MessageMeta(
      ::google::protobuf::internal::ConstantInitialized);

  inline MessageMeta(const MessageMeta& from) : MessageMeta(nullptr, from) {}
  inline MessageMeta(MessageMeta&& from) noexcept
      : MessageMeta(nullptr, std::move(from)) {}
  inline MessageMeta& operator=(const MessageMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageMeta& operator=(MessageMeta&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageMeta* internal_default_instance() {
    return reinterpret_cast<const MessageMeta*>(
        &_MessageMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MessageMeta& a, MessageMeta& b) { a.Swap(&b); }
  inline void Swap(MessageMeta* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageMeta* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MessageMeta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MessageMeta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MessageMeta& from) { MessageMeta::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MessageMeta* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "message.MessageMeta"; }

 protected:
  explicit MessageMeta(::google::protobuf::Arena* arena);
  MessageMeta(::google::protobuf::Arena* arena, const MessageMeta& from);
  MessageMeta(::google::protobuf::Arena* arena, MessageMeta&& from) noexcept
      : MessageMeta(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageIdFieldNumber = 1,
    kConversationIdFieldNumber = 2,
    kSenderIdFieldNumber = 3,
    kClientIdFieldNumber = 7,
    kTimestampFieldNumber = 4,
    kTypeFieldNumber = 5,
    kSequenceFieldNumber = 6,
  };
  // string message_id = 1;
  void clear_message_id() ;
  const std::string& message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* value);

  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(
      const std::string& value);
  std::string* _internal_mutable_message_id();

  public:
  // string conversation_id = 2;
  void clear_conversation_id() ;
  const std::string& conversation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversation_id(Arg_&& arg, Args_... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* value);

  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(
      const std::string& value);
  std::string* _internal_mutable_conversation_id();

  public:
  // string sender_id = 3;
  void clear_sender_id() ;
  const std::string& sender_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender_id(Arg_&& arg, Args_... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* value);

  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(
      const std::string& value);
  std::string* _internal_mutable_sender_id();

  public:
  // string client_id = 7;
  void clear_client_id() ;
  const std::string& client_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* value);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // int64 timestamp = 4;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // .message.MessageType type = 5;
  void clear_type() ;
  ::message::MessageType type() const;
  void set_type(::message::MessageType value);

  private:
  ::message::MessageType _internal_type() const;
  void _internal_set_type(::message::MessageType value);

  public:
  // int32 sequence = 6;
  void clear_sequence() ;
  ::int32_t sequence() const;
  void set_sequence(::int32_t value);

  private:
  ::int32_t _internal_sequence() const;
  void _internal_set_sequence(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:message.MessageMeta)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      71, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MessageMeta& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    ::google::protobuf::internal::ArenaStringPtr conversation_id_;
    ::google::protobuf::internal::ArenaStringPtr sender_id_;
    ::google::protobuf::internal::ArenaStringPtr client_id_;
    ::int64_t timestamp_;
    int type_;
    ::int32_t sequence_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class MsgNode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:message.MsgNode) */ {
 public:
  inline MsgNode() : MsgNode(nullptr) {}
  ~MsgNode() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgNode* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgNode));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgNode(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgNode(const MsgNode& from) : MsgNode(nullptr, from) {}
  inline MsgNode(MsgNode&& from) noexcept
      : MsgNode(nullptr, std::move(from)) {}
  inline MsgNode& operator=(const MsgNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgNode& operator=(MsgNode&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgNode& default_instance() {
    return *internal_default_instance();
  }
  enum ContentCase {
    kText = 2,
    kImage = 3,
    kAudio = 4,
    kVideo = 5,
    kFile = 6,
    kRich = 7,
    kCommand = 8,
    CONTENT_NOT_SET = 0,
  };
  static inline const MsgNode* internal_default_instance() {
    return reinterpret_cast<const MsgNode*>(
        &_MsgNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MsgNode& a, MsgNode& b) { a.Swap(&b); }
  inline void Swap(MsgNode* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgNode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgNode* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgNode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgNode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgNode& from) { MsgNode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgNode* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "message.MsgNode"; }

 protected:
  explicit MsgNode(::google::protobuf::Arena* arena);
  MsgNode(::google::protobuf::Arena* arena, const MsgNode& from);
  MsgNode(::google::protobuf::Arena* arena, MsgNode&& from) noexcept
      : MsgNode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetaFieldNumber = 1,
    kTextFieldNumber = 2,
    kImageFieldNumber = 3,
    kAudioFieldNumber = 4,
    kVideoFieldNumber = 5,
    kFileFieldNumber = 6,
    kRichFieldNumber = 7,
    kCommandFieldNumber = 8,
  };
  // .message.MessageMeta meta = 1;
  bool has_meta() const;
  void clear_meta() ;
  const ::message::MessageMeta& meta() const;
  PROTOBUF_NODISCARD ::message::MessageMeta* release_meta();
  ::message::MessageMeta* mutable_meta();
  void set_allocated_meta(::message::MessageMeta* value);
  void unsafe_arena_set_allocated_meta(::message::MessageMeta* value);
  ::message::MessageMeta* unsafe_arena_release_meta();

  private:
  const ::message::MessageMeta& _internal_meta() const;
  ::message::MessageMeta* _internal_mutable_meta();

  public:
  // string text = 2;
  bool has_text() const;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // bytes image = 3;
  bool has_image() const;
  void clear_image() ;
  const std::string& image() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image(Arg_&& arg, Args_... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* value);

  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(
      const std::string& value);
  std::string* _internal_mutable_image();

  public:
  // bytes audio = 4;
  bool has_audio() const;
  void clear_audio() ;
  const std::string& audio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio(Arg_&& arg, Args_... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* value);

  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(
      const std::string& value);
  std::string* _internal_mutable_audio();

  public:
  // bytes video = 5;
  bool has_video() const;
  void clear_video() ;
  const std::string& video() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_video(Arg_&& arg, Args_... args);
  std::string* mutable_video();
  PROTOBUF_NODISCARD std::string* release_video();
  void set_allocated_video(std::string* value);

  private:
  const std::string& _internal_video() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_video(
      const std::string& value);
  std::string* _internal_mutable_video();

  public:
  // bytes file = 6;
  bool has_file() const;
  void clear_file() ;
  const std::string& file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file(Arg_&& arg, Args_... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* value);

  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(
      const std::string& value);
  std::string* _internal_mutable_file();

  public:
  // string rich = 7;
  bool has_rich() const;
  void clear_rich() ;
  const std::string& rich() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rich(Arg_&& arg, Args_... args);
  std::string* mutable_rich();
  PROTOBUF_NODISCARD std::string* release_rich();
  void set_allocated_rich(std::string* value);

  private:
  const std::string& _internal_rich() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rich(
      const std::string& value);
  std::string* _internal_mutable_rich();

  public:
  // uint32 command = 8;
  bool has_command() const;
  void clear_command() ;
  ::uint32_t command() const;
  void set_command(::uint32_t value);

  private:
  ::uint32_t _internal_command() const;
  void _internal_set_command(::uint32_t value);

  public:
  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:message.MsgNode)
 private:
  class _Internal;
  void set_has_text();
  void set_has_image();
  void set_has_audio();
  void set_has_video();
  void set_has_file();
  void set_has_rich();
  void set_has_command();
  inline bool has_content() const;
  inline void clear_has_content();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 8, 1,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgNode& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::message::MessageMeta* meta_;
    union ContentUnion {
      constexpr ContentUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr text_;
      ::google::protobuf::internal::ArenaStringPtr image_;
      ::google::protobuf::internal::ArenaStringPtr audio_;
      ::google::protobuf::internal::ArenaStringPtr video_;
      ::google::protobuf::internal::ArenaStringPtr file_;
      ::google::protobuf::internal::ArenaStringPtr rich_;
      ::uint32_t command_;
    } content_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgNode

// .message.MessageMeta meta = 1;
inline bool MsgNode::has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline void MsgNode::clear_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::message::MessageMeta& MsgNode::_internal_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::message::MessageMeta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::MessageMeta&>(::message::_MessageMeta_default_instance_);
}
inline const ::message::MessageMeta& MsgNode::meta() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.MsgNode.meta)
  return _internal_meta();
}
inline void MsgNode::unsafe_arena_set_allocated_meta(::message::MessageMeta* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = reinterpret_cast<::message::MessageMeta*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.MsgNode.meta)
}
inline ::message::MessageMeta* MsgNode::release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::message::MessageMeta* released = _impl_.meta_;
  _impl_.meta_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::message::MessageMeta* MsgNode::unsafe_arena_release_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:message.MsgNode.meta)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::message::MessageMeta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::message::MessageMeta* MsgNode::_internal_mutable_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meta_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::message::MessageMeta>(GetArena());
    _impl_.meta_ = reinterpret_cast<::message::MessageMeta*>(p);
  }
  return _impl_.meta_;
}
inline ::message::MessageMeta* MsgNode::mutable_meta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::message::MessageMeta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:message.MsgNode.meta)
  return _msg;
}
inline void MsgNode::set_allocated_meta(::message::MessageMeta* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.meta_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.meta_ = reinterpret_cast<::message::MessageMeta*>(value);
  // @@protoc_insertion_point(field_set_allocated:message.MsgNode.meta)
}

// string text = 2;
inline bool MsgNode::has_text() const {
  return content_case() == kText;
}
inline void MsgNode::set_has_text() {
  _impl_._oneof_case_[0] = kText;
}
inline void MsgNode::clear_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() == kText) {
    _impl_.content_.text_.Destroy();
    clear_has_content();
  }
}
inline const std::string& MsgNode::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.MsgNode.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgNode::set_text(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kText) {
    clear_content();

    set_has_text();
    _impl_.content_.text_.InitDefault();
  }
  _impl_.content_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.MsgNode.text)
}
inline std::string* MsgNode::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:message.MsgNode.text)
  return _s;
}
inline const std::string& MsgNode::_internal_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (content_case() != kText) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.content_.text_.Get();
}
inline void MsgNode::_internal_set_text(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kText) {
    clear_content();

    set_has_text();
    _impl_.content_.text_.InitDefault();
  }
  _impl_.content_.text_.Set(value, GetArena());
}
inline std::string* MsgNode::_internal_mutable_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kText) {
    clear_content();

    set_has_text();
    _impl_.content_.text_.InitDefault();
  }
  return _impl_.content_.text_.Mutable( GetArena());
}
inline std::string* MsgNode::release_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:message.MsgNode.text)
  if (content_case() != kText) {
    return nullptr;
  }
  clear_has_content();
  return _impl_.content_.text_.Release();
}
inline void MsgNode::set_allocated_text(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_content()) {
    clear_content();
  }
  if (value != nullptr) {
    set_has_text();
    _impl_.content_.text_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgNode.text)
}

// bytes image = 3;
inline bool MsgNode::has_image() const {
  return content_case() == kImage;
}
inline void MsgNode::set_has_image() {
  _impl_._oneof_case_[0] = kImage;
}
inline void MsgNode::clear_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() == kImage) {
    _impl_.content_.image_.Destroy();
    clear_has_content();
  }
}
inline const std::string& MsgNode::image() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.MsgNode.image)
  return _internal_image();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgNode::set_image(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kImage) {
    clear_content();

    set_has_image();
    _impl_.content_.image_.InitDefault();
  }
  _impl_.content_.image_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.MsgNode.image)
}
inline std::string* MsgNode::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:message.MsgNode.image)
  return _s;
}
inline const std::string& MsgNode::_internal_image() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (content_case() != kImage) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.content_.image_.Get();
}
inline void MsgNode::_internal_set_image(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kImage) {
    clear_content();

    set_has_image();
    _impl_.content_.image_.InitDefault();
  }
  _impl_.content_.image_.Set(value, GetArena());
}
inline std::string* MsgNode::_internal_mutable_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kImage) {
    clear_content();

    set_has_image();
    _impl_.content_.image_.InitDefault();
  }
  return _impl_.content_.image_.Mutable( GetArena());
}
inline std::string* MsgNode::release_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:message.MsgNode.image)
  if (content_case() != kImage) {
    return nullptr;
  }
  clear_has_content();
  return _impl_.content_.image_.Release();
}
inline void MsgNode::set_allocated_image(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_content()) {
    clear_content();
  }
  if (value != nullptr) {
    set_has_image();
    _impl_.content_.image_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgNode.image)
}

// bytes audio = 4;
inline bool MsgNode::has_audio() const {
  return content_case() == kAudio;
}
inline void MsgNode::set_has_audio() {
  _impl_._oneof_case_[0] = kAudio;
}
inline void MsgNode::clear_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() == kAudio) {
    _impl_.content_.audio_.Destroy();
    clear_has_content();
  }
}
inline const std::string& MsgNode::audio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.MsgNode.audio)
  return _internal_audio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgNode::set_audio(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kAudio) {
    clear_content();

    set_has_audio();
    _impl_.content_.audio_.InitDefault();
  }
  _impl_.content_.audio_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.MsgNode.audio)
}
inline std::string* MsgNode::mutable_audio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:message.MsgNode.audio)
  return _s;
}
inline const std::string& MsgNode::_internal_audio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (content_case() != kAudio) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.content_.audio_.Get();
}
inline void MsgNode::_internal_set_audio(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kAudio) {
    clear_content();

    set_has_audio();
    _impl_.content_.audio_.InitDefault();
  }
  _impl_.content_.audio_.Set(value, GetArena());
}
inline std::string* MsgNode::_internal_mutable_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kAudio) {
    clear_content();

    set_has_audio();
    _impl_.content_.audio_.InitDefault();
  }
  return _impl_.content_.audio_.Mutable( GetArena());
}
inline std::string* MsgNode::release_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:message.MsgNode.audio)
  if (content_case() != kAudio) {
    return nullptr;
  }
  clear_has_content();
  return _impl_.content_.audio_.Release();
}
inline void MsgNode::set_allocated_audio(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_content()) {
    clear_content();
  }
  if (value != nullptr) {
    set_has_audio();
    _impl_.content_.audio_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgNode.audio)
}

// bytes video = 5;
inline bool MsgNode::has_video() const {
  return content_case() == kVideo;
}
inline void MsgNode::set_has_video() {
  _impl_._oneof_case_[0] = kVideo;
}
inline void MsgNode::clear_video() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() == kVideo) {
    _impl_.content_.video_.Destroy();
    clear_has_content();
  }
}
inline const std::string& MsgNode::video() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.MsgNode.video)
  return _internal_video();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgNode::set_video(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kVideo) {
    clear_content();

    set_has_video();
    _impl_.content_.video_.InitDefault();
  }
  _impl_.content_.video_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.MsgNode.video)
}
inline std::string* MsgNode::mutable_video() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:message.MsgNode.video)
  return _s;
}
inline const std::string& MsgNode::_internal_video() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (content_case() != kVideo) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.content_.video_.Get();
}
inline void MsgNode::_internal_set_video(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kVideo) {
    clear_content();

    set_has_video();
    _impl_.content_.video_.InitDefault();
  }
  _impl_.content_.video_.Set(value, GetArena());
}
inline std::string* MsgNode::_internal_mutable_video() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kVideo) {
    clear_content();

    set_has_video();
    _impl_.content_.video_.InitDefault();
  }
  return _impl_.content_.video_.Mutable( GetArena());
}
inline std::string* MsgNode::release_video() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:message.MsgNode.video)
  if (content_case() != kVideo) {
    return nullptr;
  }
  clear_has_content();
  return _impl_.content_.video_.Release();
}
inline void MsgNode::set_allocated_video(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_content()) {
    clear_content();
  }
  if (value != nullptr) {
    set_has_video();
    _impl_.content_.video_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgNode.video)
}

// bytes file = 6;
inline bool MsgNode::has_file() const {
  return content_case() == kFile;
}
inline void MsgNode::set_has_file() {
  _impl_._oneof_case_[0] = kFile;
}
inline void MsgNode::clear_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() == kFile) {
    _impl_.content_.file_.Destroy();
    clear_has_content();
  }
}
inline const std::string& MsgNode::file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.MsgNode.file)
  return _internal_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgNode::set_file(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kFile) {
    clear_content();

    set_has_file();
    _impl_.content_.file_.InitDefault();
  }
  _impl_.content_.file_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.MsgNode.file)
}
inline std::string* MsgNode::mutable_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:message.MsgNode.file)
  return _s;
}
inline const std::string& MsgNode::_internal_file() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (content_case() != kFile) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.content_.file_.Get();
}
inline void MsgNode::_internal_set_file(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kFile) {
    clear_content();

    set_has_file();
    _impl_.content_.file_.InitDefault();
  }
  _impl_.content_.file_.Set(value, GetArena());
}
inline std::string* MsgNode::_internal_mutable_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kFile) {
    clear_content();

    set_has_file();
    _impl_.content_.file_.InitDefault();
  }
  return _impl_.content_.file_.Mutable( GetArena());
}
inline std::string* MsgNode::release_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:message.MsgNode.file)
  if (content_case() != kFile) {
    return nullptr;
  }
  clear_has_content();
  return _impl_.content_.file_.Release();
}
inline void MsgNode::set_allocated_file(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_content()) {
    clear_content();
  }
  if (value != nullptr) {
    set_has_file();
    _impl_.content_.file_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgNode.file)
}

// string rich = 7;
inline bool MsgNode::has_rich() const {
  return content_case() == kRich;
}
inline void MsgNode::set_has_rich() {
  _impl_._oneof_case_[0] = kRich;
}
inline void MsgNode::clear_rich() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() == kRich) {
    _impl_.content_.rich_.Destroy();
    clear_has_content();
  }
}
inline const std::string& MsgNode::rich() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.MsgNode.rich)
  return _internal_rich();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgNode::set_rich(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kRich) {
    clear_content();

    set_has_rich();
    _impl_.content_.rich_.InitDefault();
  }
  _impl_.content_.rich_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.MsgNode.rich)
}
inline std::string* MsgNode::mutable_rich() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rich();
  // @@protoc_insertion_point(field_mutable:message.MsgNode.rich)
  return _s;
}
inline const std::string& MsgNode::_internal_rich() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (content_case() != kRich) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.content_.rich_.Get();
}
inline void MsgNode::_internal_set_rich(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kRich) {
    clear_content();

    set_has_rich();
    _impl_.content_.rich_.InitDefault();
  }
  _impl_.content_.rich_.Set(value, GetArena());
}
inline std::string* MsgNode::_internal_mutable_rich() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() != kRich) {
    clear_content();

    set_has_rich();
    _impl_.content_.rich_.InitDefault();
  }
  return _impl_.content_.rich_.Mutable( GetArena());
}
inline std::string* MsgNode::release_rich() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:message.MsgNode.rich)
  if (content_case() != kRich) {
    return nullptr;
  }
  clear_has_content();
  return _impl_.content_.rich_.Release();
}
inline void MsgNode::set_allocated_rich(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_content()) {
    clear_content();
  }
  if (value != nullptr) {
    set_has_rich();
    _impl_.content_.rich_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:message.MsgNode.rich)
}

// uint32 command = 8;
inline bool MsgNode::has_command() const {
  return content_case() == kCommand;
}
inline void MsgNode::set_has_command() {
  _impl_._oneof_case_[0] = kCommand;
}
inline void MsgNode::clear_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_case() == kCommand) {
    _impl_.content_.command_ = 0u;
    clear_has_content();
  }
}
inline ::uint32_t MsgNode::command() const {
  // @@protoc_insertion_point(field_get:message.MsgNode.command)
  return _internal_command();
}
inline void MsgNode::set_command(::uint32_t value) {
  if (content_case() != kCommand) {
    clear_content();
    set_has_command();
  }
  _impl_.content_.command_ = value;
  // @@protoc_insertion_point(field_set:message.MsgNode.command)
}
inline ::uint32_t MsgNode::_internal_command() const {
  if (content_case() == kCommand) {
    return _impl_.content_.command_;
  }
  return 0u;
}

inline bool MsgNode::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void MsgNode::clear_has_content() {
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}
inline MsgNode::ContentCase MsgNode::content_case() const {
  return MsgNode::ContentCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MessageMeta

// string message_id = 1;
inline void MessageMeta::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& MessageMeta::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.MessageMeta.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageMeta::set_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.MessageMeta.message_id)
}
inline std::string* MessageMeta::mutable_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:message.MessageMeta.message_id)
  return _s;
}
inline const std::string& MessageMeta::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void MessageMeta::_internal_set_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(value, GetArena());
}
inline std::string* MessageMeta::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_id_.Mutable( GetArena());
}
inline std::string* MessageMeta::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:message.MessageMeta.message_id)
  return _impl_.message_id_.Release();
}
inline void MessageMeta::set_allocated_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageMeta.message_id)
}

// string conversation_id = 2;
inline void MessageMeta::clear_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& MessageMeta::conversation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.MessageMeta.conversation_id)
  return _internal_conversation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageMeta::set_conversation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.MessageMeta.conversation_id)
}
inline std::string* MessageMeta::mutable_conversation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:message.MessageMeta.conversation_id)
  return _s;
}
inline const std::string& MessageMeta::_internal_conversation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_.Get();
}
inline void MessageMeta::_internal_set_conversation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(value, GetArena());
}
inline std::string* MessageMeta::_internal_mutable_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conversation_id_.Mutable( GetArena());
}
inline std::string* MessageMeta::release_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:message.MessageMeta.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void MessageMeta::set_allocated_conversation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageMeta.conversation_id)
}

// string sender_id = 3;
inline void MessageMeta::clear_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& MessageMeta::sender_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.MessageMeta.sender_id)
  return _internal_sender_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageMeta::set_sender_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.MessageMeta.sender_id)
}
inline std::string* MessageMeta::mutable_sender_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:message.MessageMeta.sender_id)
  return _s;
}
inline const std::string& MessageMeta::_internal_sender_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_id_.Get();
}
inline void MessageMeta::_internal_set_sender_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.Set(value, GetArena());
}
inline std::string* MessageMeta::_internal_mutable_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_id_.Mutable( GetArena());
}
inline std::string* MessageMeta::release_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:message.MessageMeta.sender_id)
  return _impl_.sender_id_.Release();
}
inline void MessageMeta::set_allocated_sender_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageMeta.sender_id)
}

// int64 timestamp = 4;
inline void MessageMeta::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t MessageMeta::timestamp() const {
  // @@protoc_insertion_point(field_get:message.MessageMeta.timestamp)
  return _internal_timestamp();
}
inline void MessageMeta::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:message.MessageMeta.timestamp)
}
inline ::int64_t MessageMeta::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void MessageMeta::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// .message.MessageType type = 5;
inline void MessageMeta::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::message::MessageType MessageMeta::type() const {
  // @@protoc_insertion_point(field_get:message.MessageMeta.type)
  return _internal_type();
}
inline void MessageMeta::set_type(::message::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.MessageMeta.type)
}
inline ::message::MessageType MessageMeta::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::message::MessageType>(_impl_.type_);
}
inline void MessageMeta::_internal_set_type(::message::MessageType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// int32 sequence = 6;
inline void MessageMeta::clear_sequence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = 0;
}
inline ::int32_t MessageMeta::sequence() const {
  // @@protoc_insertion_point(field_get:message.MessageMeta.sequence)
  return _internal_sequence();
}
inline void MessageMeta::set_sequence(::int32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:message.MessageMeta.sequence)
}
inline ::int32_t MessageMeta::_internal_sequence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_;
}
inline void MessageMeta::_internal_set_sequence(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = value;
}

// string client_id = 7;
inline void MessageMeta::clear_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& MessageMeta::client_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:message.MessageMeta.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageMeta::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:message.MessageMeta.client_id)
}
inline std::string* MessageMeta::mutable_client_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:message.MessageMeta.client_id)
  return _s;
}
inline const std::string& MessageMeta::_internal_client_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_id_.Get();
}
inline void MessageMeta::_internal_set_client_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(value, GetArena());
}
inline std::string* MessageMeta::_internal_mutable_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_id_.Mutable( GetArena());
}
inline std::string* MessageMeta::release_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:message.MessageMeta.client_id)
  return _impl_.client_id_.Release();
}
inline void MessageMeta::set_allocated_client_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageMeta.client_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace message


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::message::MessageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::message::MessageType>() {
  return ::message::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // Message_2eproto_2epb_2eh
